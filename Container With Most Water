Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai).
n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0).
Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7].
In this case, the max area of water (blue section) the container can contain is 49.

Example 2:

Input: height = [1,1]
Output: 1
Example 3:

Input: height = [4,3,2,1,4]
Output: 16
Example 4:

Input: height = [1,2,1]
Output: 2



First Solution : O(n^2) and it`s not efficient algorithm.

class Solution {
    
    public int maxArea(int[] height, int start, int depth) {
		if ((start + depth) == height.length) {
			return 0;
		}
		int waterHeight = Math.min(height[start], height[start + depth]);
		int waterMax = depth * waterHeight;
		return Math.max(waterMax, maxArea(height, start, depth + 1));
	}
    
    public int maxArea(int[] height) {
        int max = -1;
		for(int i=0; i < height.length; i++) {
			max = Math.max(max, maxArea(height, i, 1));
		}
        return max;
    }
}


The best solution : O(1)

class Solution {
    
    
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int maxValue = -1;
        while(left < right) {
        	int waterDepth = Math.min(height[left], height[right]) * (right - left);
        	maxValue = Math.max(maxValue, waterDepth);
        	if(height[left] < height[right])
        		left++;
        	else
        		right--;
        }
        return maxValue;
    }
}

