There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104






class Solution {
    public static int binarySearchTree(int[] items, int target, int low, int high) {
		int middle = (high + low) / 2;
		if (low > high) {
			return -1;
		}
		if (target == items[middle]) {
			return middle;
		}
		if (target > items[middle]) {
			return binarySearchTree(items, target, middle + 1, high);
		} else {
			return binarySearchTree(items, target, low, middle - 1);
		}
	}
    public int search(int[] nums, int target) {
        int left = 0;
		int right = nums.length - 1;
		while (left < right) {
			int middle = (left + right) / 2;
			if (nums[middle] > nums[right])
				left = middle + 1;
			else
				right = middle;
		}
		if (target >= nums[left] && target <= nums[nums.length - 1]) {
			right = nums.length - 1;
		} else {
			right = left - 1;
			left = 0;
		}
		return binarySearchTree(nums, target, left, right);
    }
}
