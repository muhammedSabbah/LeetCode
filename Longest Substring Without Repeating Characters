Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Solution:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int start = 0;
		int end = 0;
		int result = 0;
		Map<Character, Integer> substring = new HashMap<Character, Integer>();
		while (end < s.length()) {
			Character currentChar = s.charAt(end);
			if (substring.containsKey(currentChar)) {
				int DuplicateIndx = substring.get(currentChar);
				result = Math.max(result, (end - start));
				for (int i = start; i <= DuplicateIndx; i++) {
					substring.remove(s.charAt(i));
				}
				start = DuplicateIndx + 1;
			}
			substring.put(currentChar, end);
			end++;
		}
		result = Math.max(result, (end - start));
		return result;
    }
}
