Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109




class Solution {
    public static int findFirstBinarySearch(int[] nums, int target) {
		int left = 0;
		int right = nums.length - 1;
		int middle = -1;
		while (left <= right) {
			middle = (left + right) / 2;
			if (nums[middle] == target && (middle == 0 || nums[middle - 1] < target)) {
				return middle;
			} else if (nums[middle] < target) {
				left = middle + 1;
			} else {
				right = middle - 1;
			}
		}
		return -1;
	}

	public static int findLastBinarySearch(int[] nums, int target) {
		int left = 0;
		int right = nums.length - 1;
		int middle = -1;
		while (left <= right) {
			middle = (left + right) / 2;
			if (nums[middle] == target && (middle == nums.length - 1 || nums[middle + 1] > target)) {
				return middle;
			} else if (nums[middle] <= target) {
				left = middle + 1;
			} else {
				right = middle - 1;
			}
		}
		return -1;
	}
    public int[] searchRange(int[] nums, int target) {
        int first = findFirstBinarySearch(nums, target);
		int end = findLastBinarySearch(nums, target);
		return new int[] { first, end };
    }
}
