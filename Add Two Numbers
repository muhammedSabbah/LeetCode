You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

-Example 1:
  Input: l1 = [2,4,3], l2 = [5,6,4]
  Output: [7,0,8]
  Explanation: 342 + 465 = 807.

-Example 2:
  Input: l1 = [0], l2 = [0]
  Output: [0]

-Example 3:
  Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
  Output: [8,9,9,9,0,0,0,1]

-Constraints:
  The number of nodes in each linked list is in the range [1, 100].
  0 <= Node.val <= 9
  It is guaranteed that the list represents a number that does not have leading zeros.
  
  -Solution:
  /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = new ListNode();
		    summtion(l1, l2, result, 0);
		    return result;
    }
    
    public void summtion(ListNode l1, ListNode l2, ListNode result, int carry) {
		  if(l1 == null && l2 == null) {
		  	if(carry == 1) {
		  		result.val = carry;
		  	}
			  return;
		  }
		int firstValue = l1 == null ? 0 : l1.val;
		int secValue = l2 == null ? 0 : l2.val;
        int sumValue = firstValue + secValue + carry;
		if(sumValue >= 10) {
			result.val = sumValue - 10;
			carry = 1;
		} else {
			result.val = sumValue;
			carry = 0;
		}
		if((l1 != null && l1.next != null) || (l2 !=null && l2.next !=null) || carry == 1)
			result.next = new ListNode();
		summtion(l1==null? null:l1.next, l2==null? null:l2.next, result.next, carry);
	}
}
